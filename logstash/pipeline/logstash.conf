input {
  rabbitmq {
    host => "http://rabbitmq"
    port => 5672
    user => "guest"
    password => "guest"
    queue => "maxwell"                 # 声明 queue
    exchange => "maxwell"              # 绑定到 exchange
    exchange_type => "fanout"          # 类型要匹配 maxwell 的配置
    auto_delete => false
    ack => true
    # 关键：直接在 input 中使用 json codec 解析消息体，这比在 filter 中处理更高效
    codec => "json"
  }
}

filter {
  # 在这里添加 grok 或 mutate 来处理 maxwell 的数据结构
  # 例如：添加 @timestamp 或提取字段
  # json {
  #   # source => "message"
  # }

  translate {
    source => "[type]"
    target => "[@metadata][action]"
    dictionary => {
      "insert" => "index"
      "bootstrap-insert" => "index"
      "update" => "update"
      "delete" => "delete"
    }
    fallback => "unknown"
  }

  # 如果事件类型未被成功映射 (例如 DDL 事件)，则丢弃该事件
  if [@metadata][action === 'unknown'] {
    drop {}
  }

  mutate {
    add_field => { "[@metadata][es_index]" => "%{[database]}-%{[table]}" }
    add_field => { "[@metadata][es_id]" => "%{[data][id]}" }
  }

  mutate {
    lowercase => [ "[@metadata][es_index]" ]
  }

  # 处理datetime字段
  if [data][createdAt] {
    date {
      match => [ "[data][createdAt]", "yyyy-MM-dd HH:mm:ss" ]
      target => "[data][createdAt]"
    }
  }
  
  if [data][updatedAt] {
    date {
      match => [ "[data][updatedAt]", "yyyy-MM-dd HH:mm:ss" ]
      target => "[data][updatedAt]"
    }
  }

  if [@metadata][action] in ["index", "update"] {
    ruby {
      code => '
        # 获取 data 字段的值
        data_hash = event.get("data")
        # 检查 data_hash 是否是一个有效的哈希表 (Hash)
        if data_hash.is_a?(Hash)
          # 遍历哈希表，将其所有键值对设置到事件的顶层
          data_hash.each do |k, v|
            event.set(k, v)
          end
        end
      '
    }
  }

  mutate {
    remove_field => [
      "message",
      "original",
      "@version",
      "@timestamp",
      "event",
      "database",
      "type",
      "ts",
      "xid",
      "commit",
      "data",
      "old",
      "table"
    ]
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{[@metadata][es_index]}"
    document_id => "%{[@metadata][es_id]}"
    action => "%{[@metadata][action]}"
    user => "elastic"
    password => "changeme"
    # 开启重试机制，以防 ES 暂时不可用
    retry_on_conflict => 3
  }

  # 将结果打印到标准输出
  stdout {
    codec => rubydebug {
      # 将 metadata 选项设置为 true
      metadata => true
    }
  }
}
